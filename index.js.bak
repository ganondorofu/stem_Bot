const { Client, GatewayIntentBits, SlashCommandBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, InteractionType } = require('discord.js');
require('dotenv').config();

// ボットクライアントの作成
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers
    ]
});

// 設定
const config = {
    token: process.env.DISCORD_TOKEN,
    guildId: process.env.GUILD_ID,
    currentMemberRoleId: process.env.CURRENT_MEMBER_ROLE_ID,
    obRoleId: process.env.OB_ROLE_ID
};

// スラッシュコマンドの定義
const nameCommand = new SlashCommandBuilder()
    .setName('name')
    .setDescription('自分のニックネームを部活のルールに合わせて設定します。');

// ボットの準備完了時の処理
client.once('ready', async () => {
    console.log(`${client.user.tag} がログインしました！`);
    
    try {
        // スラッシュコマンドを登録
        const guild = client.guilds.cache.get(config.guildId);
        if (guild) {
            await guild.commands.create(nameCommand);
            console.log('スラッシュコマンド /name を登録しました。');
        } else {
            console.error('指定されたギルドが見つかりません。');
        }
    } catch (error) {
        console.error('コマンド登録中にエラーが発生しました:', error);
    }
});

// インタラクションの処理
client.on('interactionCreate', async interaction => {
    try {
        if (interaction.isCommand() && interaction.commandName === 'name') {
            await handleNameCommand(interaction);
        } else if (interaction.isModalSubmit() && interaction.customId === 'nickname_modal') {
            await handleModalSubmit(interaction);
        }
    } catch (error) {
        console.error('インタラクション処理中にエラーが発生しました:', error);
        
        const errorMessage = 'コマンド処理中にエラーが発生しました。しばらく時間をおいてから再度お試しください。';
        
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ content: errorMessage, ephemeral: true });
        } else {
            await interaction.reply({ content: errorMessage, ephemeral: true });
        }
    }
});

// /nameコマンドの処理
async function handleNameCommand(interaction) {
    // モーダルの作成
    const modal = new ModalBuilder()
        .setCustomId('nickname_modal')
        .setTitle('ニックネーム設定');

    // 本名入力フィールド
    const nameInput = new TextInputBuilder()
        .setCustomId('real_name')
        .setLabel('本名')
        .setPlaceholder('あなたの本名を入力してください。')
        .setStyle(TextInputStyle.Short)
        .setRequired(true)
        .setMaxLength(50);

    // 学籍番号/期生入力フィールド
    const idInput = new TextInputBuilder()
        .setCustomId('student_id_or_generation')
        .setLabel('学籍番号 or 期生')
        .setPlaceholder('あなたの学籍番号、または何期生かを入力してください。')
        .setStyle(TextInputStyle.Short)
        .setRequired(true)
        .setMaxLength(10);

    // アクションローの作成
    const nameRow = new ActionRowBuilder().addComponents(nameInput);
    const idRow = new ActionRowBuilder().addComponents(idInput);

    modal.addComponents(nameRow, idRow);

    // モーダルを表示
    await interaction.showModal(modal);
}

// モーダル送信の処理
async function handleModalSubmit(interaction) {
    const realName = interaction.fields.getTextInputValue('real_name').trim();
    const studentIdOrGeneration = interaction.fields.getTextInputValue('student_id_or_generation').trim();

    // ユーザーのロールを取得
    const member = interaction.member;
    const userRoles = member.roles.cache;

    let isAlumni = false;
    let isCurrentMember = false;

    // ロール判定
    if (userRoles.has(config.obRoleId)) {
        isAlumni = true;
    } else if (userRoles.has(config.currentMemberRoleId)) {
        isCurrentMember = true;
    }

    // ロールチェック
    if (!isAlumni && !isCurrentMember) {
        await interaction.reply({
            content: 'ニックネーム設定には、現役部員またはOBのロールが必要です。',
            ephemeral: true
        });
        return;
    }

    let nickname;
    let validationResult;

    if (isAlumni) {
        // OBの場合：期生の検証
        validationResult = validateGeneration(studentIdOrGeneration);
        if (!validationResult.isValid) {
            await interaction.reply({
                content: 'OBの方は期生を2から10の数字で入力してください。',
                ephemeral: true
            });
            return;
        }
        nickname = `${realName}(第${studentIdOrGeneration}期卒業生)`;
    } else {
        // 現役部員の場合：学籍番号の検証
        validationResult = validateStudentId(studentIdOrGeneration);
        if (!validationResult.isValid) {
            await interaction.reply({
                content: '現役部員の方は学籍番号を10101から30940の範囲で入力してください。',
                ephemeral: true
            });
            return;
        }
        nickname = `${realName}(${studentIdOrGeneration})`;
    }

    // ニックネームの設定
    try {
        await member.setNickname(nickname);
        await interaction.reply({
            content: `ニックネームを**\`${nickname}\`**に変更しました。`,
            ephemeral: true
        });
    } catch (error) {
        console.error('ニックネーム設定エラー:', error);
        
        let errorMessage = 'ニックネームの設定に失敗しました。';
        
        if (error.code === 50013) {
            errorMessage = 'ニックネームを変更する権限がありません。ボットの権限設定を確認してください。';
        } else if (error.code === 50035) {
            errorMessage = 'ニックネームが長すぎます。より短い名前をお試しください。';
        }
        
        await interaction.reply({
            content: errorMessage,
            ephemeral: true
        });
    }
}

// 期生の検証
function validateGeneration(input) {
    const generation = parseInt(input, 10);
    
    if (isNaN(generation)) {
        return { isValid: false, error: '数字で入力してください。' };
    }
    
    if (generation < 2 || generation > 10) {
        return { isValid: false, error: '期生は2から10の範囲で入力してください。' };
    }
    
    return { isValid: true };
}

// 学籍番号の検証
function validateStudentId(input) {
    const studentId = parseInt(input, 10);
    
    if (isNaN(studentId)) {
        return { isValid: false, error: '数字で入力してください。' };
    }
    
    if (studentId < 10101 || studentId > 30940) {
        return { isValid: false, error: '学籍番号は10101から30940の範囲で入力してください。' };
    }
    
    return { isValid: true };
}

// エラーハンドリング
process.on('unhandledRejection', error => {
    console.error('未処理のPromise拒否:', error);
});

process.on('uncaughtException', error => {
    console.error('未処理の例外:', error);
    process.exit(1);
});

// ボットの起動
client.login(config.token);
